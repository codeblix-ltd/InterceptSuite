name: Windows Release Build

on:
  release:
    types: [published, created]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # Needed to create releases and upload artifacts

env:
  BUILD_TYPE: Release

jobs:
  build-windows-release:
    # Use a GitHub-hosted runner instead of a self-hosted one
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # =====================================================================
    # STEP 1: Setup vcpkg and Build C Library (.dll)
    # =====================================================================
    
    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          !${{ github.workspace }}/vcpkg/buildtrees
          !${{ github.workspace }}/vcpkg/packages
          !${{ github.workspace }}/vcpkg/downloads
        key: vcpkg-windows-${{ hashFiles('vcpkg.json') }}-v2

    - name: Setup vcpkg
      uses: actions/checkout@v4
      with:
        repository: microsoft/vcpkg
        path: vcpkg
        fetch-depth: 0

    - name: Bootstrap vcpkg
      run: |
        cd vcpkg
        ./bootstrap-vcpkg.bat -disableMetrics
        git pull origin master
      shell: cmd

    - name: Build C Library (.dll)
      shell: pwsh
      run: |
        Write-Host "=== Building InterceptSuite C Library for Windows ===" -ForegroundColor Green

        # Build the library using the vcpkg we just set up
        .\build_windows.ps1 -VcpkgRoot "${{ github.workspace }}\vcpkg"

        Write-Host "=== Verifying DLL build ===" -ForegroundColor Green
        $dllPath = "build\Release\Intercept.dll"
        if (Test-Path $dllPath) {
          $dllSize = (Get-Item $dllPath).Length
          Write-Host "‚úÖ Intercept.dll built successfully - Size: $dllSize bytes" -ForegroundColor Green
        } else {
          Write-Error "‚ùå Intercept.dll not found in build directory"
          exit 1
        }

    # =====================================================================
    # STEP 2: Setup .NET
    # =====================================================================

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    # =====================================================================
    # STEP 3: Build .NET Application and Create Unsigned Installer
    # =====================================================================

    - name: Build .NET Application and Create Installer
      shell: pwsh
      run: |
        Write-Host "=== Building .NET InterceptSuite Application and Installer (Unsigned) ===" -ForegroundColor Green

        # Navigate to the installer directory and run the build scripts
        # All signing steps have been removed from this block
        Set-Location "GUI\InterceptSuite\Installer\Windows"
        .\build-application.ps1
        .\build-installers.ps1

        Write-Host "=== Verifying Installer Build ===" -ForegroundColor Green
        $installerExe = Get-ChildItem -Path "..\dist" -Filter "*.exe" -Recurse | Select-Object -First 1
        if ($installerExe) {
          Write-Host "‚úÖ Installer EXE created successfully at $($installerExe.FullName)" -ForegroundColor Green
        } else {
          Write-Error "‚ùå No installer EXE found in dist directory after build"
          exit 1
        }

    # =====================================================================
    # STEP 4: Create Release Artifacts
    # =====================================================================

    - name: Prepare release artifacts
      shell: pwsh
      run: |
        Write-Host "=== Preparing release artifacts ===" -ForegroundColor Green
        New-Item -ItemType Directory -Path "release-artifacts" -Force

        # Copy EXE installer from dist directory
        if (Test-Path "GUI\InterceptSuite\Installer\dist") {
          $exeFiles = Get-ChildItem -Path "GUI\InterceptSuite\Installer\dist" -Filter "*.exe" -Recurse
          foreach ($exe in $exeFiles) {
            Copy-Item $exe.FullName "release-artifacts\$($exe.Name)"
            Write-Host "‚úÖ EXE installer copied: $($exe.Name)" -ForegroundColor Green
          }
        } else {
          Write-Host "‚ùå Installer dist directory not found!" -ForegroundColor Red
          exit 1
        }

    # =====================================================================
    # STEP 5: Upload to GitHub Release (if this is a release)
    # =====================================================================

    - name: Upload to GitHub Release
      if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: release-artifacts/*.exe

    # =====================================================================
    # STEP 6: Upload Build Artifacts (for all builds)
    # =====================================================================

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-release-artifacts
        path: release-artifacts/
        retention-days: 30
        if-no-files-found: error

    - name: Build Summary
      shell: pwsh
      run: |
        Write-Host "‚úÖ Windows build completed successfully!" -ForegroundColor Green
        Write-Host "üì¶ Unsigned EXE installer created and uploaded" -ForegroundColor Cyan
